/*
::::::::::::::::::README::::::::::::::::::::::
Suggestions:
  - Use em or % for fonts
  - Leave window colouring in icx display, its easier to do that in js
  - Keep to the 3 main sizes for proof of concept
  - Don't go more than 3 levels deep in nesting
  add more...

*/






@import "config";


$breakpoints: (
        'small'  : 767px,
        'medium' : 992px,
        'large'  : 1200px
);

$baseFontHeight: 22px;
$baseBorderWidth:70px;

/* Mixins */

/*
 inspired by http://www.sitepoint.com/managing-responsive-breakpoints-sass/
 $breakpoint: string (represents the size of the string)
 returns @media ($threshold $name.value) {..}
*/
@mixin respond-to($name,$threshold) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $name) {
    // Prints a media query based on the value
    @media #{"("+$threshold +": "+ inspect(map-get($breakpoints, $name))+")"} {
      @content;
    }
  }

    // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

/***************************************************************/

.icxWorldBorder {
  @include respond-to('small','max-width') {
    width:($baseBorderWidth/2);
  }
  @include respond-to('small','min-width') {
    width:($baseBorderWidth/2);
  }
  @include respond-to('medium','min-width') {
    width:($baseBorderWidth/1.5);
  }
  @include respond-to('large','min-width') {
    width:$baseBorderWidth;
  }
  position: fixed;
  height:100%;
}

